
https://medium.com/basecs/demystifying-depth-first-search-a7c14cccf056
http://mishadoff.com/blog/dfs-on-binary-tree-array/
https://www.geeksforgeeks.org/iterative-preorder-traversal-of-a-n-ary-tree/
https://www.geeksforgeeks.org/iterative-postorder-traversal/
https://www.geeksforgeeks.org/iterative-postorder-traversal-using-stack/


There are 2 types of tree traversing:
Breath First Search & Depth First Search.
BFS (go wide - level order):
 Traverse through all children of a node before moving on to check/visit the descendant nodes.
 Traverse one level at a time.
DFS (go deep):
 Traverse through descendants of a path before moving on to a new path.
 In DFS once we start down a path we don't stop until we go to the end.
 In other words we traverse through one branch of a tree until we get to a leaf
 and then we work our way back to the trunk of the tree.

BFS is good for taking decisions (chess, X0, e.t.c) also for finding shortest path between 2 nodes.

========================= DFS strategies for BST: ===============================
D = data, L = left, R = right
 [D]  [L]  [R] (PreOrder)
 [L]  [D]  [R] (InOrder - specific to binary tree)
 [L]  [R]  [D] (PostOrder)

 [D]  [R] [L]  (less usual)
 [R]  [D] [L]  (less usual)
 [R]  [L] [D]  (less usual)

                                F
                      /                 \

               D                                 K
           /        \                      /          \
       B               E               G                    L
    /    \                          /
   A       C                     H
                                   \
                                     J
                                    /
                                   I



InOrder     [L][D][R]       ABCDEFHIJGKL
            InOrder traversal gives us a sorted list.
            A tree with numbers as external nodes and operators as internal nodes can be evaluated InOrder.
PreOrder    [D][L][R]       FDBACEKGHJIL
            A book index (chapters, sub-chapters) can be generated by PreOrder traversal.
PostOrder   [L][R][D]       ACBEDIJHGLKF
            Calculating a directory size can be done by PostOrder traversal.

========================= traversing strategies ===============================

https://en.m.wikipedia.org/wiki/Tree_traversal

DFS

preorder(node):
    if (node == null) return
    visit(node)
    for each child in node.children do
        preorder(child)

preorderBST(node)
    if (node == null) return
    visit(node)
    preorder(node.left)
    preorder(node.right)

iterativePreorderBST(node)
  if (node == null) return
  s ← empty stack
  s.push(node)
  while (not s.isEmpty())
    node ← s.pop()
    visit(node)
    //right child is pushed first so that left is processed first
    if node.right ≠ null
      s.push(node.right)
    if node.left ≠ null
      s.push(node.left)

https://www.geeksforgeeks.org/iterative-preorder-traversal-of-a-n-ary-tree/

inorderBST(node)
    if (node == null) return
    inorder(node.left)
    visit(node)
    inorder(node.right)

iterativeInorderBST(node)
  s ← empty stack
  while (not s.isEmpty() or node ≠ null)
    if (node ≠ null)
      s.push(node)
      node ← node.left
    else
      node ← s.pop()
      visit(node)
      node ← node.right

postorder(node):
    if (node == null) return
    for each child in node.children do
        postorder(child)
    visit(node)

postorderBST(node)
    if (node == null) return
    postorder(node.left)
    postorder(node.right)
    visit(node)

iterativePostorderBST(node)
  s ← empty stack
  lastNodeVisited ← null
  while (not s.isEmpty() or node ≠ null)
    if (node ≠ null)
      s.push(node)
      node ← node.left
    else
      peekNode ← s.peek()
      // if right child exists and traversing node
      // from left child, then move right
      if (peekNode.right ≠ null and lastNodeVisited ≠ peekNode.right)
        node ← peekNode.right
      else
        visit(peekNode)
        lastNodeVisited ← s.pop()


BFS

def breadthfirst(root):
    q ← empty queue
    q.enqueue(root)
    while not q.isEmpty() do
        node ← q.dequeue()
        visit(node)
        for child in node.children:
            q.enqueue(child)

breadthfirstBST(root)
    q ← empty queue
    q.enqueue(root)
    while not q.isEmpty() do
        node ← q.dequeue()
        visit(node)
        if node.left ≠ null then
            q.enqueue(node.left)
        if node.right ≠ null then
            q.enqueue(node.right)
